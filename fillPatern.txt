



Black :
(20,12),(20,13),(20,14),(20,15),(20,16),(20,17),(20,18),(20,19),(20,20)
(19,12),(19,13),(19,14),(19,15),(19,16),(19,17),(19,18),(19,19),(19,20)
(18,14),(18,15),(18,16),(18,17),(18,18),(18,19),(18,20)
(17,14),(17,15),(17,16),(17,17),(17,18),(17,19),(17,20)
(16,13),(16,14),(16,15),(16,18),(16,19),(16,20)
(15,12),(15,13),(15,20)
(14,12),(14,20)


VALUES -

white : 1
very light grey : 2
light grey : 3
dark grey : 4
Black : 5



1 1 2 2 3 3 4 4 5 5 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0


    // [row][col]
    public static int [][] matrixArray = {

            { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 },
            { 3 , 3 , 0 , 3 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 },
            { 3 , 3 , 3 , 3 , 3 , 3 , 0 , 0 , 1 , 2 , 2 , 2 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 },
            { 3 , 3 , 3 , 3 , 3 , 3 , 0 , 0 , 1 , 2 , 2 , 2 , 2 , 1 , 0 , 0 , 0 , 0 , 0 , 0 },
            { 0 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 2 , 2 , 2 , 1 , 0 , 0 , 1 , 1 , 0 , 0 },
            { 0 , 3 , 3 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 0 },
            { 3 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 },
            { 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 3 },
            { 0 , 0 , 1 , 2 , 2 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 3 , 3 },
            { 0 , 1 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 0 , 0 , 0 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 0 },
            { 0 , 1 , 0 , 1 , 1 , 1 , 2 , 1 , 3 , 0 , 0 , 0 , 3 , 3 , 3 , 3 , 0 , 0 , 0 , 0 },
            { 0 , 1 , 1 , 0 , 0 , 0 , 3 , 3 , 3 , 3 , 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 , 0 , 0 },
            { 0 , 0 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 },
            { 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 0 , 0 , 4 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 },
            { 0 , 0 , 3 , 3 , 3 , 3 , 0 , 0 , 0 , 1 , 1 , 4 , 4 , 0 , 0 , 0 , 0 , 0 , 0 , 4 },
            { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 4 , 4 , 4 , 0 , 0 , 4 , 4 , 4 },
            { 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 4 , 4 , 4 , 4 , 4 , 4 , 4 },
            { 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , 4 , 4 , 4 , 4 , 4 , 4 },
            { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 },
            { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 }

    };



//============== back up code

//south node
            Node southNode=nodeMatrix[x][y+1];
            priorityQueue.add(southNode);

            //east node
            Node eastNode=nodeMatrix[x+1][y];
            priorityQueue.add(eastNode);

            //west node
            Node westNode=nodeMatrix[x-1][y];
            priorityQueue.add(westNode);

            //north-east node
            Node northEastNode=nodeMatrix[x+1][y-1];
            priorityQueue.add(northEastNode);

            //south east node
            Node southEastNode=nodeMatrix[x+1][y+1];
            priorityQueue.add(southEastNode);

            //north-west node
            Node northWestNode=nodeMatrix[x-1][y-1];
            priorityQueue.add(northWestNode);

            //south-west node
            Node southWestNode=nodeMatrix[x-1][y+1];
            priorityQueue.add(southWestNode);







            //north node
            Node northNode=nodeMatrix[x][y-1];

            if(!northNode.isVisited() && !northNode.isBlocked()){
                //update gCost
                northNode.setgCost(currentNode.getNodeWeight() + northNode.getNodeWeight());
                //added to priority queue
                priorityQueue.add(northNode);
            }




            /////======

      


  //checking for the top left corner
            if(x==0 && y==0){
                //only check and update the east , south-east and south nodes
                updateChildNode(currentNode,"EAST");
                updateChildNode(currentNode,"SOUTH-EAST");
                updateChildNode(currentNode,"SOUTH");
            }

            //checking for the bottom left corner
            else if(x==0 && y==19){
                //only check the north , north east and east nodes
                updateChildNode(currentNode,"EAST");
                updateChildNode(currentNode,"NORTH-EAST");
                updateChildNode(currentNode,"NORTH");
            }

            //checking for the top right corner
            else if(x==19 && y==0){
                //only check the west , south-west and south nodes
                updateChildNode(currentNode,"WEST");
                updateChildNode(currentNode,"SOUTH-WEST");
                updateChildNode(currentNode,"SOUTH");
            }

            //checking for the bottom right corner
            else if(x==19 && y==19){
                //only check west , north-west and north nodes
                updateChildNode(currentNode,"WEST");
                updateChildNode(currentNode,"NORTH-WEST");
                updateChildNode(currentNode,"NORTH");
            }

            //check for horizontal TOP border cases
            else if(y==0 && x>0 && x<19 ){
                //only check  east , west ,south-east ,south-west and south
                updateChildNode(currentNode,"EAST");
                updateChildNode(currentNode,"SOUTH-EAST");
                updateChildNode(currentNode,"WEST");
            }

            //check for horizontal BOTTOM border cases
            else if(y==19 && x>0 && x<19 ){
                //only check  east , west ,north-east ,north-west and north
                updateChildNode(currentNode,"EAST");
                updateChildNode(currentNode,"WEST");
                updateChildNode(currentNode,"NORTH-WEST");
            }


            //checking for vertical RIGHT border cases
            else if(x==19 && y>0 && y<19 ){
                //only check for north , south , east , north-east and south-east
                updateChildNode(currentNode,"NORTH");
                updateChildNode(currentNode,"SOUTH");
                updateChildNode(currentNode,"WEST");
                updateChildNode(currentNode,"NORTH-WEST");
                updateChildNode(currentNode,"SOUTH-WEST");

            }

            //checking for vertical LEFT border cases
            else if(x==0 && y>0 && y<19 ){
                //only check for north , south , west , north-west and south-west
                updateChildNode(currentNode,"NORTH");
                updateChildNode(currentNode,"SOUTH");
                updateChildNode(currentNode,"EAST");
                updateChildNode(currentNode,"NORTH-EAST");
                updateChildNode(currentNode,"SOUTH-EAST");

            }
